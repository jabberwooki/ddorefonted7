<?php

/**
 * Implements hook_requirements().
 */
function webpush_requirements($phase) {
  $requirements = [];
  $t = get_t();

  if (!class_exists('\Minishlink\WebPush\Subscription')) {
    $requirements['webpush_php_library'] = [
      'title' => $t('WebPush PHP library', [], ['context' => 'webpush']),
      'description' => $t('WebPush requires the <a href="@library_url">WebPush PHP (<code>minishlink/web-push</code>)</a> library to be installed and autoloaded with composer (e.g. using the <a href="@composer_manager_url">composer_manager</a> module).', [
        '@library_url' => 'https://github.com/web-push-libs/web-push-php',
        '@composer_manager_url' => 'https://www.drupal.org/project/composer_manager',
      ],
        ['context' => 'webpush']),
      'severity' => REQUIREMENT_ERROR,
    ];
  }

  return $requirements;
}

/**
 * Implements hook_schema()
 *
 * @return array
 */
function webpush_schema() {

  $schema['webpush_subscription'] = [
    'description' => 'The main table that will store webpush_subscription entities',

    'fields' => [
      'id' => [
        'description' => 'Primary key for webpush subscriptions',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'created' => [
        'description' => 'The Unix timestamp when the node was most recently created by services.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'subscription' => [
        'description' => 'Serialized object of type Minishlink\WebPush\Subscription',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ],
    ],

    'unique keys' => [
      'id' => ['id'],
    ],

    'primary key' => ['id'],
  ];

  $schema['webpush_notification'] = [
    'description' => 'The main table that will store webpush_notification entities',

    'fields' => [
      'id' => [
        'description' => 'Primary key for webpush notifications',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'created' => [
        'description' => 'The Unix timestamp when the node was most recently created by services.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'title' => [
        //        'description' => 'Serialized object of type Minishlink\WebPush\Subscription',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ],
      'body' => [
        //        'description' => 'Serialized object of type Minishlink\WebPush\Subscription',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ],
      'link' => [
        //        'description' => 'Serialized object of type Minishlink\WebPush\Subscription',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ],
      'total' => [
        'description' => 'The number of subscriptions that this notification was attempted to be sent to.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ],
      'success' => [
        'description' => 'The number of subscriptions that this notification was successfully sent to.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ],

    ],

    'unique keys' => [
      'id' => ['id'],
    ],

    'primary key' => ['id'],
  ];

  return $schema;

}

/**
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 */
function webpush_uninstall() {
  field_attach_delete_bundle('webpush_subscription', 'webpush_subscription');
  field_attach_delete_bundle('webpush_notification', 'webpush_notification');
  variable_delete('webpush_public_key');
  variable_delete('webpush_private_key');
  variable_delete('webpush_link_type');
  variable_delete('webpush_icon_fid');
  variable_delete('webpush_badge_fid');
  variable_delete('webpush_keep_invalid_subscriptions');
}
