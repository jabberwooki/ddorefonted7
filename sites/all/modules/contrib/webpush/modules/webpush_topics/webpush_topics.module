<?php

function webpush_topics_webpush_properties_info() {
  return [
    'webpush_topics',
  ];
}

function webpush_topics_webpush_buttons_info() {
  return [
    'topics_button_id' => 'webpush-topics-subscribe',
  ];
}

/**
 * Implements hook_block_info().
 */
function webpush_topics_block_info() {
  $blocks = [];
  $blocks['webpush_user_panel'] = [
    'info' => t('Webpush user panel', [], ['context' => 'webpush_topics']),
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webpush_topics_block_view($delta = '') {
  if (!webpush_is_enabled() || !user_access('register webpush')) {
    return [];
  }

  $block = [];

  switch ($delta) {
    case 'webpush_user_panel' :

      $block['content'] = [
        'message' => ['#markup' => theme('webpush_topics_user_panel', _webpush_topics_block_variables())],

        '#attached' => [
          'css' => [
            drupal_get_path('module', 'webpush_topics') . '/css/user_panel.css',
          ],
          'js' => [
            [
              'data' => drupal_get_path('module', 'webpush_topics') . '/js/build/user_panel.js',
              'type' => 'file',
            ],
          ],
        ],

      ];

      break;
  }

  return $block;
}

function _webpush_topics_block_variables() {
  $variables = [];

  $topics = _webpush_topics_get_topics();
  $variables['topics'] = $topics;

  return $variables;
}

function _webpush_topics_get_topics($include_all = TRUE) {
  $topics = [];
  if ($include_all) {
    $topics['all'] = t('All', [], ['context' => 'webpush_topics']);
  }
  $vocabulary = taxonomy_vocabulary_machine_name_load('webpush_topics');
  // Load terms in the sequence set up in the taxonomy.
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach ($terms as $key => $term) {
    $topics[$term->tid] = $term->name;
  }
  return $topics;
}

/**
 * Implements hook_theme().
 */
function webpush_topics_theme($existing, $type, $theme, $path) {
  return [
    'webpush_topics_user_panel' => [
      'template' => 'webpush-topics--user-panel',
      'variables' => [
        'topics' => NULL,
      ],
    ],
  ];

}

/**
 * Alter the incoming data.
 *
 * If 'webpush_topics' has the "all" value selected, we unset all values, to
 * indicate that this subscription should cover all topics (even the ones that
 * will be created in the future!)
 *
 * @param $data
 */
function webpush_topics_webpush_create_subscription_alter(&$data) {
  _webpush_topics_handle_all_topics($data);
}

/**
 * Alter the incoming data.
 *
 * If 'webpush_topics' has the "all" value selected, we unset all values, to
 * indicate that this subscription should cover all topics (even the ones that
 * will be created in the future!)
 *
 * @param $data
 */
function webpush_topics_webpush_update_subscription_alter(&$data) {
  _webpush_topics_handle_all_topics($data);
}

function _webpush_topics_handle_all_topics(&$data) {
  if (isset($data['webpush_topics'])) {
    if (in_array('all', $data['webpush_topics'])) {
      $data['webpush_topics'] = [];
    }
    else {
      // Make sure that these topics actually exist.
      $tids = webpush_topics_get_topics_tids();
      foreach ($data['webpush_topics'] as $i => $tid) {
        if (!in_array($tid, $tids)) {
          unset($data['webpush_topics'][$i]);
        }
      }
    }
  }
}

function webpush_topics_get_topics_tids() {
  $tids = [];
  $vid = taxonomy_vocabulary_machine_name_load('webpush_topics')->vid;
  $topics_tree = taxonomy_get_tree($vid);
  foreach ($topics_tree as $item) {
    $tids[] = $item->tid;
  }
  return $tids;
}

function webpush_topics_webpush_return_subscription_data_alter(&$return_data, $entity) {
  try {
    $topics_tids = [];
    $entity_wrapper = entity_metadata_wrapper('webpush_subscription', $entity);
    $topics = $entity_wrapper->webpush_topics->value();
    if (!empty($topics)) {
      foreach ($topics as $item) {
        $topics_tids[] = $item->tid;
      }
    }
    $return_data['webpush_topics'] = $topics_tids;
  } catch (EntityMetadataWrapperException $e) {
    watchdog(
      'webpush',
      $e->getMessage() . '<br>See ' . __FUNCTION__ . '():' . __LINE__ . ' <pre>!trace</pre>',
      ['!trace' => $e->getTraceAsString()],
      WATCHDOG_ERROR
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function webpush_topics_form_webpush_admin_send_form_alter(&$form, &$form_state, $form_id) {
  if (!webpush_subscription__count()) {
    return;
  }

  $topics = _webpush_topics_get_topics($include_all = FALSE);
  $form['topics_wrapper'] = [
    '#type' => 'fieldset',
    '#title' => t('Topics', [], ['context' => 'webpush_topics']),
    '#descriptions' => t('Choose which topics subscribers should receive your notification.', [], ['context' => 'webpush_topics']),
  ];
  $form['topics_wrapper']['topics_mode'] = [
    '#type' => 'radios',
    '#options' => [
      'all' => t('All', [], ['context' => 'webpush_topics']),
      'select' => t('Select topics', [], ['context' => 'webpush_topics']),
    ],
    '#default_value' => 'select',
  ];
  $form['topics_wrapper']['topics'] = [
    '#type' => 'checkboxes',
    '#title' => t('Topics', [], ['context' => 'webpush_topics']),
    '#options' => $topics,
    '#states' => [
      'invisible' => [':input[name="topics_mode"]' => ['value' => 'all']],
      'disabled' => [':input[name="topics_mode"]' => ['value' => 'all']],
    ],
  ];

  // Append custom validation callback.
  $form['#validate'][] = 'webpush_topics_admin_send_form_validate';

  // Prepend custom submit callback, to add the selected topics.
  array_unshift($form['#submit'], 'webpush_topics_admin_send_form_presubmit');
}

function webpush_topics_admin_send_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];

  watchdog('webpush_topics', 'dans le validate');
  $topics_mode = $values['topics_mode'];
  watchdog('webpush_topics', 'topics_mode = ' . $topics_mode);
  if ($topics_mode === 'select') {
    $selected_topics = $form_state["values"]["topics"];
    if (empty(array_filter($selected_topics))) {
      form_error($form['topics_wrapper']['topics_mode'], t('You have to select at least one topic.', [], ['context' => 'webpush_topics']));
      return FALSE;
    }
  }
}

function webpush_topics_admin_send_form_presubmit(&$form, &$form_state) {
  $values = $form_state['values'];
  $topics_mode = $values['topics_mode'];

  if ($topics_mode === 'select') {
    $selected_topics = array_filter($form_state["values"]["topics"]);

    // Get the subscriptions of these topics
    $targets_with_topics = webpush_topics__get_subscription_entities_filtered($selected_topics);

    // and the ones that are subscribed to all topics
    // Note: This is needed, because EntityFieldQuery does not support IS NULL
    // filtering.
    // @see https://www.drupal.org/project/drupal/issues/1157006
    $targets_without_topics = webpush_topics__get_subscription_entities_without_topics();

    $targets = array_merge($targets_with_topics, $targets_without_topics);
    $form_state['_webpush_targets'] = $targets;

    $form_state['_webpush_notification_entity_fields'] = [
      'webpush_topics' => $selected_topics,
    ];
  }
}

function webpush_topics__get_subscription_entities_filtered($topics) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'webpush_subscription')
    ->fieldCondition('webpush_topics', 'target_id', $topics, 'IN')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['webpush_subscription'])) {
    return array_keys($result['webpush_subscription']);
  }
  return [];
}

function webpush_topics__get_subscription_entities_without_topics() {
  $sql = "SELECT webpush_subscription.id AS id
          FROM  {webpush_subscription} 
          LEFT JOIN {field_data_webpush_topics} AS field_data_webpush_topics
            ON webpush_subscription.id = field_data_webpush_topics.entity_id 
            AND field_data_webpush_topics.entity_type = 'webpush_subscription' 
            AND field_data_webpush_topics.deleted = '0'
          WHERE field_data_webpush_topics.webpush_topics_target_id IS NULL";
  $result = db_query($sql)->fetchAllAssoc('id');
  return $result ? array_keys($result) : [];
}

/**
 * Implements hook_menu_alter().
 */
function webpush_topics_menu_alter(&$items) {
  //  $items['admin/structure/webpush-notification/manage']['page callback'] = 'webpush_topics_notification__overview';
  $items['admin/reports/webpush-subscriptions']['page callback'] = 'webpush_topics_subscription__overview';
}

function webpush_topics_views_api() {
  return [
    'api' => 3,
  ];
}

function webpush_topics_notification__overview() {
  $content[] = [
    '#markup' => views_embed_view('webpush_notifications_topics', 'default'),
  ];
  return $content;
}

function webpush_topics_subscription__overview() {
  $count = webpush_subscription__count();
  $content[] = [
    '#prefix' => '<div>',
    '#markup' => t('You have <strong>!number</strong> push notification subscription(s):', ['!number' => $count], ['context' => 'webpush_topics']),
    '#suffix' => '<br><br></div><ul>',
  ];

  $topics = _webpush_topics_get_topics($include_all = FALSE);
  foreach ($topics as $topic_tid => $topic_label) {
    $content[] = [
      '#prefix' => '<li>',
      '#markup' => t('<em>!topic:</em> <strong>!count</strong> subscription(s).', [
        '!topic' => $topic_label,
        '!count' => count(webpush_topics__get_subscription_entities_filtered([$topic_tid])),
      ],
        ['context' => 'webpush_topics']),
      '#suffix' => '</li>',
    ];
  }

  $content[] = [
    '#prefix' => '<li>',
    '#markup' => t('<em>All topics:</em> <strong>!count</strong> subscription(s).', ['!count' => count(webpush_topics__get_subscription_entities_without_topics())], ['context' => 'webpush_topics']),
    '#suffix' => '</li></ul>',
  ];

  if ($count) {
    $content[] = drupal_get_form('webpush_subscription__delete_all_form');
  }

  return $content;
}

/**
 * Implements hook_block_info_alter().
 *
 * When webpush_topics is enabled, the simple button block that is offered by
 * webpush module should not be available.
 */
function webpush_topics_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks["webpush"]["simple_button"]["region"] = BLOCK_REGION_NONE;
  $blocks["webpush"]["simple_button"]["status"] = 0;
  $blocks["webpush"]["simple_button"]["info"] = $blocks["webpush"]["simple_button"]["info"] . ' (' . t('Unavailable') . ')';
}

/**
 * Implements hook_block_view_alter().
 *
 * When webpush_topics is enabled, the simple button block that is offered by
 * webpush module should not be available.
 */
function webpush_topics_block_view_alter(&$data, $block) {
  if ($block->module === 'webpush' && $block->delta === 'simple_button') {
    $data['content'] = [];
  }
}
